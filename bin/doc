#!/bin/sh
#
# Copyright (c) 2012-2018 Lauri Rooden &lt;lauri@rooden.ee&gt;  
# [The MIT License](http://lauri.rooden.ee/mit-license.txt)
#
#-
#- Usage: litejs-doc COMMAND
#-
#- The most commonly used make commands are:
#-
#-    help            Default target. Displays this menu
#-    todo            Show TODOs from comments
#-
#- Documentation commands are:
#-
#-    authors         Create AUTHORS file from git log
#-    changelog       Create ChangeLog file from git log
#-    news            Create NEWS file from git log
#-    thanks          Create THANKS file from source
#-    version         Create VERSION file from git
#-

# TODO:2018-03-16:lauri:Rewrite to Javascript

title() {
	printf "\n%s\n" "$1" | sed "/./{p;s/./${2-=}/g}"
}

tag_title() {
	DATE=$(git show -s --format="%ci" $1 | tail -n1)
	NAME=$(git describe --tags --exact-match $1 2>/dev/null)
	[ "$NAME" ] && title "${DATE%% *} Version ${NAME#?}" "-" && printf "\n"
}

comments() {
	{
		git log --date=short --grep="^$1:" --pretty=format:"%h:%cd:%b"
		grep -IrinE "^[ 	]*(//|/\*|##*|--+)[ 	]*($1)" ${SRC-*}
	} | sed -E -e "s,^([^:]*:[-0-9]*):[ 	/*#-]*$2(.*),  * \2 \[\1\]," | sort -u -t[ -k1,1
}



readme_help() {
	sed -n "/^#- \?/s///p" $0
}

readme_todo() {
	printf "\nList of planned enhancements and bugs.\n\n"
	comments "TODO|FIXME|BUG(BUG)?" | sort -r
}

readme_authors() {
	# git shortlog -sen --date=local --since="1 year ago"
	# git shortlog -sen --date=local --until="1 year ago"
	# Barney Rubble <b@rubble.com> (http://barnyrubble.tumblr.com/)
	{
		printf "\n## Authors ordered by number of commits.\n\n"
		git shortlog -sen | sed -E -e 's/[ 	]*([0-9]*)[	 ]*(.*)/  * \2 <\1>/g'
	} | tee AUTHORS
}

readme_changelog() {
	{
		title "ChangeLog"

		# insert blank line after header when HEAD is not tagged
		git describe --tags --exact-match HEAD >/dev/null 2>&1 || printf "\n"

		git log --no-merges --pretty="tformat:%h|%d|%s (%aN)" | while IFS="|" read HASH TAG MSG; do
			[ -n "$TAG" ] && tag_title $HASH
			printf "  * %s\n" "$MSG"
		done
	} | tee ChangeLog
}

readme_news() {
	{
		title "News"
		git tag -l v* | sort -r | while read TAG; do
			tag_title $TAG
			git cat-file tag $TAG | tail -n+6
			printf "\n"
		done
	} | tee NEWS
}

readme_thanks() {
	{
		printf "\nThanks for acknowledgments (ordered by alphabet).\n\n"
		comments "THANKS" "THANKS[: ]*" | sort
	} | tee THANKS
}

readme_version() {
	# git describe --long --dirty 2>/dev/null > VERSION || echo "Initial version-g$(git rev-parse --short HEAD)" > VERSION
	echo "$(git describe --long 2>/dev/null || echo "Initial version-g$(git rev-parse --short HEAD)")$(git diff --no-ext-diff --quiet --exit-code || echo '-dirty')" > VERSION
	echo "Version: $(cat VERSION)"
}

readme_activity() {
	q="CREATE TABLE IF NOT EXISTS stat (ts INT PRIMARY KEY, author TEXT, files int, insertions int, deletions int);";
	insert=$(git log --no-merges --shortstat --pretty="tformat:%at,'%an',." master..HEAD |
		sed -E -n '/,./{N;N;s/(.*),\.[^0-9]*([0-9]+)[^0-9]*([0-9]+)[^0-9]*([0-9]+)[^0-9]*/INSERT OR REPLACE INTO stat VALUES(\1,\2,\3,\4);/p}');
	select="SELECT strftime('%Y.%W', ts, 'unixepoch' ) as W, author, sum(insertions) AS i, sum(deletions) AS d FROM stat group by W, author;";
	echo "$q $insert $select" | sqlite3 .git/activity.db;
	#$ git log --date=iso8601 --pretty=format:"%ad" | cut -c12-13 | sort | uniq -c > heatmap_hour.txt
	#$ git log --date=rfc2822 --pretty=format:"%ad" | cut -c1-3 | sort | uniq -c > heatmap_weekday.txt
	#$ git log --date=short --pretty=format:"%ad" | sort -r | uniq -c > heatmap_date.txt
	#$ git log --date=iso8601 --pretty=format:"%ad" | cut -c1-10 | sort -r | uniq -c > heatmap_date.txt

	#$ git ls-tree --name-only -r HEAD | xargs -i@ git blame -we @ | cut -d' ' -f2 | sort | uniq -c

	#$ git log --date=short --pretty=format:"%x00%ad" --shortstat | tr -s "\n,\0" "  \n" | cut -d " " -f 1,2,5,7

	# number of commits
	#$ git shortlog -s --all | { SUM=0; while read NUM NAME; do SUM=$(($SUM+$NUM)); done; echo $SUM; }

}

readme_shallow_submodules() {
	git submodule init
	for i in $(git submodule | sed -e 's/.* //'); do
			spath=$(git config -f .gitmodules --get submodule.$i.path)
			surl=$(git config -f .gitmodules --get submodule.$i.url)
			git clone --depth 1 $surl $spath
	done
	git submodule update
}

[ -n "$1" ] && "readme_$1"


